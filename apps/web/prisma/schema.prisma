// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider     = "postgresql"
   url       = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}




enum CategoryType {
  FRONTEND     // フロントエンド開発
  BACKEND      // バックエンド開発
  DATABASE     // データベース
  PROGRAMMING  // プログラミング言語
  AI           // AI/機械学習
  MOBILE       // モバイル開発
  DEVOPS       // DevOps
  SECURITY     // セキュリティ
  CLOUD        // クラウド
}

// BOOK STRUCTURE
model Book {
  id            String    @id @default(uuid())
  title         String
  slug          String    @unique
  color         String?
  description   String    @db.Text
  icon          String
  documentUrl String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  

  category      CategoryType?  // メインカテゴリー
  subCategories CategoryType[] @default([])  // サブカテゴリー

// 階層構造 - NoAction を Restrict に変更
  parentId      String?
  parent        Book?     @relation("BookHierarchy", fields: [parentId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  children      Book[]    @relation("BookHierarchy")
  level         Int       @default(0)
  order         Int       @default(0)

  // Relations
  bookChapters  BookChapter[]
  bookSections  BookSection[]



  prerequisites String[]  @default([])

  bookBestPractices  BookBestPractice[]

  // Indexing slug for faster searches
  @@index([slug])
  @@index([parentId])
}





enum ContentType {
  LINK
  IMAGE
  TEXT
}
model BookBestPractice {
  id        String  @id @default(uuid())
  title     String
  icon      String?
  description      String
  contentType  ContentType @default(TEXT)

  book      Book    @relation(fields: [bookId], references: [id])
  bookId    String

  bookBestPracticeItems BookBestPracticeItem[]

  @@index([bookId])
}



model BookBestPracticeItem {
 id        String  @id @default(uuid())
 title String?
 description String?
 link      String? 
 imageUrl  String?
 text      String?
 contentType  ContentType @default(TEXT)

 bookBestPracticeId    String
 bookBestPractice      BookBestPractice    @relation(fields: [bookBestPracticeId], references: [id], onDelete: Cascade)

 @@index([bookBestPracticeId])
}


model BookChapter {
  id            String @id @default(uuid())
  title         String
  description   String @db.Text
  slug          String @unique
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  order         Int      @default(0)
  bookId        String
  book          Book @relation(fields: [bookId], references: [id], onDelete: Cascade)
  bookSections  BookSection[]

  @@index([bookId])
}



model BookSection {
  id            String @id @default(uuid())
  title         String
  description   String @db.Text
  slug          String @unique

  estimatedMinutes Int @default(30)
  order         Int @default(0)
  aiContent String? @db.Text

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

 
  bookChapterId String
  bookChapter   BookChapter @relation(fields: [bookChapterId], references: [id], onDelete: Cascade)
   bookId        String      // 新しく追加
  book          Book @relation(fields: [bookId], references: [id], onDelete: Cascade)

  @@index([bookChapterId])
   @@index([bookId])
}


